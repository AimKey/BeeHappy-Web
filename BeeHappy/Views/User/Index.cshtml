@model BusinessObjects.User
@using CommonObjects.AppConstants

@{
    ViewBag.Title = $"Thông tin cá nhân - {Model.Username}";
    Layout = "_UserSettingsLayout";
    var userAvatarUrl = Model.Profile?.AvatarUrl ?? UserConstants.DEFAULT_USER_AVATAR_LINK;
}

<div class="max-w-4xl mx-auto">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-white mb-2">Thông tin cá nhân</h1>
        <p class="text-gray-400">Quản lý thông tin tài khoản và cài đặt cá nhân</p>
    </div>

    <!-- Messages -->
    @if (TempData[MessageConstants.MESSAGE] != null)
    {
        <div
            class="mb-6 p-4 rounded-lg @(TempData[MessageConstants.MESSAGE_TYPE]?.ToString() == MessageConstants.SUCCESS ? "bg-green-600/20 border border-green-500/30 text-green-300" : "bg-red-600/20 border border-red-500/30 text-red-300")">
            <div class="flex items-center gap-3">
                <i class="fas fa-@(TempData[MessageConstants.MESSAGE_TYPE]?.ToString() == MessageConstants.SUCCESS ? "check-circle" : "exclamation-triangle")"></i>
                <span>@TempData[MessageConstants.MESSAGE]</span>
            </div>
        </div>
    }

    <!-- Profile Card -->
    <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-6 mb-6">
        <div class="flex flex-col md:flex-row items-center md:items-center gap-6">
            <!-- Avatar Section -->
            <div class="w-full md:w-1/3 flex flex-col items-center md:items-center">
                <div class="relative group">
                    <div class="w-32 h-32 rounded-full overflow-hidden border-4 border-white/10 shadow-lg">
                        <img id="userAvatar"
                             src="@userAvatarUrl"
                             alt="@Model.Username"
                             class="w-full h-full object-cover"/>
                    </div>
                    <!-- Upload Overlay -->
                    <div
                        class="absolute inset-0 bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center cursor-pointer"
                        onclick="document.getElementById('avatarInput').click()">
                        <i class="fas fa-camera text-white text-2xl"></i>
                    </div>
                </div>

                <!-- Avatar Upload Form -->
                <form id="avatarForm" asp-action="UpdateUserAvatar" asp-controller="User" method="post"
                      enctype="multipart/form-data" class="hidden">
                    <input type="file"
                           id="avatarInput"
                           name="userImage"
                           accept="image/*"
                           onchange="uploadAvatar(this)"/>
                </form>

                <button type="button"
                        onclick="document.getElementById('avatarInput').click()"
                        class="mt-3 px-4 py-2 btn-secondary">
                    <i class="fas fa-upload mr-2"></i>
                    Thay đổi ảnh đại diện
                </button>
            </div>

            <!-- User Info -->
            <div class="w-full md:w-2/3">
                <div class="flex flex-col gap-4">
                    <!-- Username -->
                    <div>
                        <label class="text-sm font-medium text-gray-300 mb-2"><i class="fas fa-user text-gray-400"></i>
                            Tên người dùng </label>
                        <form asp-action="UpdateUsername" asp-controller="User" method="post"
                              class="flex gap-3 w-full items-center">

                            <input type="hidden" name="currentUserId" value="@Model.Id"/>
                            <input type="text"
                                   name="newUsername"
                                   value="@Model.Username"
                                   minlength="3"
                                   maxlength="50"
                                   required
                                   class="w-full bg-dark-surface/60 border border-dark-border rounded px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-primary/60"/>
                            <button type="submit" style="display: block"
                                    class="btn-primary px-3 py-2 text-sm self-start h-full">
                                <i class="fas fa-save mr-1"></i>
                            </button>
                        </form>
                        <p class="text-xs text-amber-400 mt-2 font-bold"><i
                                class="fa-solid fa-triangle-exclamation"></i>
                            Hệ thống chỉ nhận diện được nếu tên người dùng trùng với tên kênh YouTube.</p>
                        <p class="text-xs text-gray-400 mt-2">Tên phải từ 3-50 kí tự</p>
                    </div>

                    <!-- Email -->
                    <div>
                        <label class="text-sm font-medium text-gray-300"><i class="fas fa-envelope text-gray-400"></i>
                            Email</label>
                        <div class="flex items-center gap-3">
                            <span class="text-white">@Model.Email</span>
                        </div>
                    </div>

                    <!-- Account Status -->
                    <div>
                        <label class="text-sm font-medium text-gray-300"><i class="fas fa-crown text-gray-400"></i>
                            Trạng thái tài khoản</label>
                        <div class="flex items-center gap-3">
                                <span class="text-@(Model.IsPremium ? "yellow-400" : "white") font-medium">
                                    @(Model.IsPremium ? "Premium" : "Thường")
                                </span>
                        </div>
                    </div>

                    <!-- Member Since -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Thành viên từ</label>
                        <div class="flex items-center gap-3">
                            <i class="fas fa-calendar text-gray-400"></i>
                            <span class="text-white">@Model.CreatedAt.ToString("dd/MM/yyyy")</span>
                        </div>
                    </div>
                </div>

                <!-- Bio Section -->
                @if (!string.IsNullOrEmpty(Model.Profile?.Bio))
                {
                    <div class="mt-6">
                        <label class="block text-sm font-medium text-gray-300 mb-2">Giới thiệu</label>
                        <div class="bg-dark-surface/60 border border-dark-border rounded-lg p-4">
                            <p class="text-gray-300">@Model.Profile.Bio</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Additional Info Cards -->
    @* <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> *@
    @*     <!-- Badges Card --> *@
    @*     <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-6"> *@
    @*         <div class="flex items-center gap-3 mb-4"> *@
    @*             <i class="fas fa-award text-yellow-400"></i> *@
    @*             <h3 class="text-lg font-semibold text-white">Huy hiệu</h3> *@
    @*         </div> *@
    @*         <div class="text-center"> *@
    @*             <div class="text-3xl font-bold text-yellow-400 mb-2">@(Model.Badges?.Count ?? 0)</div> *@
    @*             <p class="text-gray-400 text-sm">Huy hiệu đã đạt được</p> *@
    @*         </div> *@
    @*     </div> *@
    @* *@
    @*     <!-- Paints Card --> *@
    @*     <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-6"> *@
    @*         <div class="flex items-center gap-3 mb-4"> *@
    @*             <i class="fas fa-palette text-purple-400"></i> *@
    @*             <h3 class="text-lg font-semibold text-white">Màu sắc</h3> *@
    @*         </div> *@
    @*         <div class="text-center"> *@
    @*             <div class="text-3xl font-bold text-purple-400 mb-2">@(Model.Paints?.Count ?? 0)</div> *@
    @*             <p class="text-gray-400 text-sm">Màu sắc sở hữu</p> *@
    @*         </div> *@
    @*     </div> *@
    @* *@
    @*     <!-- Editors Card --> *@
    @*     @* <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-6"> *@
    @*         <div class="flex items-center gap-3 mb-4"> *@
    @*             <i class="fas fa-edit text-blue-400"></i> *@
    @*             <h3 class="text-lg font-semibold text-white">Chỉnh sửa</h3> *@
    @*         </div> *@
    @*         <div class="text-center"> *@
    @*             <div class="text-3xl font-bold text-blue-400 mb-2">@(Model.Editors?.Count ?? 0)</div> *@
    @*             <p class="text-gray-400 text-sm">Lần chỉnh sửa</p> *@
    @*         </div> *@
    @*     </div> *@
    @* </div> *@
</div>


<script>
    function uploadAvatar(input) {
        console.log('uploadAvatar function called');
        const file = input.files[0];
        if (!file) {
            console.log('No file selected');
            return;
        }
        console.log('File selected:', file.name, file.type, file.size);

        // Get file extension
        const fileName = file.name.toLowerCase();
        const fileExtension = fileName.substring(fileName.lastIndexOf('.'));
        const isGif = fileExtension === '.gif';
        const isWebp = fileExtension === '.webp';
        const isPremium = @(Model.IsPremium ? "true" : "false");

        // Validate file type based on server restrictions
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            alert('Loại tệp không được phép. Vui lòng tải lên tệp hình ảnh hợp lệ.');
            input.value = '';
            return;
        }

        // Check premium restrictions for animated images
        if ((isGif || isWebp) && !isPremium) {
            alert('Chỉ người dùng Premium mới có thể tải lên hình đại diện động (GIF, WebP).');
            input.value = '';
            return;
        }

        // Validate file size (5MB max)
        const maxSize = 5 * 1024 * 1024;
        if (file.size > maxSize) {
            alert('Kích thước file không được vượt quá 5MB');
            input.value = '';
            return;
        }

        // Immediately show the new image temporarily
        const avatarImg = document.getElementById('userAvatar');
        if (!avatarImg) {
            console.error('Avatar image element not found');
            alert('Không tìm thấy phần tử ảnh đại diện');
            return;
        }

        console.log('Current avatar src:', avatarImg.src);
        const originalSrc = avatarImg.src;
        const newImageUrl = URL.createObjectURL(file);
        console.log('New image URL created:', newImageUrl);

        // Add error handling for image loading
        avatarImg.onload = function () {
            console.log('New avatar image loaded successfully');
        };

        avatarImg.onerror = function () {
            console.error('Failed to load new avatar image');
            avatarImg.src = originalSrc;
            URL.revokeObjectURL(newImageUrl);
        };

        console.log('Setting new image src...');
        avatarImg.src = newImageUrl;

        // Submit the form
        const form = document.getElementById('avatarForm');
        if (form) {
            form.submit();
        } else {
            console.error('Avatar form not found');
            // Revert to original image
            avatarImg.src = originalSrc;
            URL.revokeObjectURL(newImageUrl);
            input.value = '';
        }
    }

    function showNotification(message, type) {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 ${
            type === 'success' ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
        }`;
        notification.textContent = message;

        document.body.appendChild(notification);

        // Auto remove after 3 seconds
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
</script>
