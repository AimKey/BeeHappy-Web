@using MongoDB.Bson
@model BeeHappy.ViewModels.EmoteViewModel
@{
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    bool isOwner = Model.OwnerId == currentUserId;
    ViewData["Title"] = Model.Name + " - Emote Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // d1d5dc is the same as text-gray-300
    var ownerPaintColor = string.IsNullOrEmpty(Model.OwnerNamePaint) ? "#d1d5dc" : Model.OwnerNamePaint;
}

<link rel="stylesheet" href="~/css/emotes-directory.css"/>

<div class="emotes-directory">
    <!-- Main Content -->
    <div class="main-content" style="width: 100%;">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-start justify-between">
                <div class="flex-1">
                    <h1 class="text-3xl font-bold text-white mb-3">@Model.Name</h1>
                    <div class="flex items-center gap-3">
                        <img src="@Model.OwnerAvatar" class="w-10 h-10 rounded-full border-2 border-primary/30" alt="@Model.OwnerName">
                        <span class="font-medium" style="color: @ownerPaintColor">@Model.OwnerName</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Emote Display -->
        <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-8 mb-8">
            <div class="text-center">
                @{
                    // --- BƯỚC 1: SỬA LOGIC TÌM URL ---
                    // Tìm URL bằng cách kiểm tra đuôi tên file (ví dụ: "x32.png", "x32.gif")
                    var file32 = Model.Files?.FirstOrDefault(f => f.Url.EndsWith("x32.png") || f.Url.EndsWith("x32.gif") || f.Url.EndsWith("x32.jpeg") || f.Url.EndsWith("x32.jpg"));
                    var file64 = Model.Files?.FirstOrDefault(f => f.Url.EndsWith("x64.png") || f.Url.EndsWith("x64.gif") || f.Url.EndsWith("x64.jpeg") || f.Url.EndsWith("x64.jpg"));
                    var file96 = Model.Files?.FirstOrDefault(f => f.Url.EndsWith("x96.png") || f.Url.EndsWith("x96.gif") || f.Url.EndsWith("x96.jpeg") || f.Url.EndsWith("x96.jpg"));
                    var file128 = Model.Files?.FirstOrDefault(f => f.Url.EndsWith("x128.png") || f.Url.EndsWith("x128.gif") || f.Url.EndsWith("x128.jpeg") || f.Url.EndsWith("x128.jpg"));

                    // Lấy URL và fallback nếu không có
                    var url32 = file32?.Url ?? Model.Files?.FirstOrDefault()?.Url;
                    var url64 = file64?.Url ?? url32;
                    var url96 = file96?.Url ?? url64;
                    var url128 = file128?.Url ?? url96;

                    // Lấy kích thước thật từ tên file để hiển thị text cho chính xác
                    string GetDimensions(string url)
                    {
                        if (string.IsNullOrEmpty(url)) return "";
                        try
                        {
                            return System.IO.Path.GetFileNameWithoutExtension(url);
                        }
                        catch
                        {
                            return "";
                        }
                    }

                    var dims32 = GetDimensions(file32?.Url) ?? "Cao 32px";
                    var dims64 = GetDimensions(file64?.Url) ?? "Cao 64px";
                    var dims96 = GetDimensions(file96?.Url) ?? "Cao 96px";
                    var dims128 = GetDimensions(file128?.Url) ?? "Cao 128px";

                    var activeSet = Model.UserEmoteSets?.FirstOrDefault(s => s.IsActive);
                    var activeSetId = activeSet?.Id == null ? "" : activeSet.Id.ToString();
                }

                <div class="flex justify-center items-end gap-6 mb-8">

                    <div class="flex flex-col items-center">
                        <div class="bg-dark-surface/60 border border-dark-border rounded-lg p-2 mb-2 flex items-center justify-center" style="min-height: 48px;">
                            <img src="@url32" alt="@Model.Name" class="h-8" />
                        </div>
                        <span class="text-xs text-gray-400">@dims32</span>
                    </div>

                    <div class="flex flex-col items-center">
                        <div class="bg-dark-surface/60 border border-dark-border rounded-lg p-3 mb-2 flex items-center justify-center" style="min-height: 88px;">
                            <img src="@url64" alt="@Model.Name" class="h-16" />
                        </div>
                        <span class="text-xs text-gray-400">@dims64</span>
                    </div>

                    <div class="flex flex-col items-center">
                        <div class="bg-dark-surface/60 border border-dark-border rounded-lg p-4 mb-2 flex items-center justify-center" style="min-height: 128px;">
                            <img src="@url96" alt="@Model.Name" class="h-24" />
                        </div>
                        <span class="text-xs text-gray-400">@dims96</span>
                    </div>

                    <div class="flex flex-col items-center">
                        <div class="bg-dark-surface/60 border border-dark-border rounded-lg p-5 mb-2 flex items-center justify-center" style="min-height: 168px;">
                            <img src="@url128" alt="@Model.Name" class="h-32" />
                        </div>
                        <span class="text-xs text-gray-400">@dims128</span>
                    </div>
                </div>

                <!-- Tags -->
                @if (Model.Tags != null && Model.Tags.Any())
                {
                    <div class="flex flex-wrap justify-center gap-2 mb-8">
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="tag-item bg-dark-surface/60 text-white text-sm px-3 py-1 rounded-full flex items-center space-x-2 border border-dark-border">
                                @tag
                            </span>
                        }
                    </div>
                }

                <!-- Action Buttons -->
                <div class="btn-group items-center justify-center">
                    @{
                        var isThisEmoteInActiveSet = Model.UserEmoteSets?
                            .Any(s => s.IsActive && s.Emotes?.Contains(ObjectId.Parse(Model.Id)) == true) == true;
                    }
                    @if (!string.IsNullOrEmpty(activeSetId))
                    {
                    <button
                        class="btn-primary @(string.IsNullOrEmpty(activeSetId) ? "btn-disabled" : "")"
                        data-action="add-to-active-set"
                        id="add-to-active-btn"
                        data-active-set-id="@activeSetId"
                        @(string.IsNullOrEmpty(activeSetId) ? "disabled" : "")>
                        <p class="truncate max-w-60">
                            @if (isThisEmoteInActiveSet)
                            {
                                <i class="fas fa-check"></i>
                            }
                            else
                            {
                                <i class="fas fa-plus"></i>
                            }
                            Thêm vào @activeSet?.Name
                        </p>
                    </button>
                    }

                    <button class="btn-secondary"
                            data-action="add-to-collection"
                            id="open-emote-set-modal">
                        <i class="fas fa-folder-plus"></i>
                        <span>Thêm vào bộ emote...</span>
                    </button>

                    @if (isOwner)
                    {
                        <button class="btn-secondary"
                                data-action="edit">
                            <i class="fas fa-edit"></i>
                            <span>Chỉnh sửa</span>
                        </button>
                    }

                    <div class="relative dropdown">
                        <button class="btn-secondary"
                                data-dropdown="more-menu">
                            <span>Thêm</span>
                            <i class="fas fa-chevron-down dropdown-arrow"></i>
                        </button>
                        <div
                            class="dropdown-menu absolute right-0 mt-2 w-48 bg-dark-surface border border-dark-border rounded-lg shadow-lg z-10"
                            id="more-menu">
                            <div class="px-4 py-2 text-xs text-gray-400 border-b border-dark-border">Tải xuống</div>
                            @if (!string.IsNullOrEmpty(url32))
                            {
                                <a href="@url32"
                                   download="@(Model.Name)_32x32.@(url32.Split('.').LastOrDefault() ?? "png")"
                                   class="block px-4 py-2 text-sm hover:bg-dark-surface/60 text-white no-underline">
                                    <i class="fas fa-download mr-2"></i>32x32
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(url64))
                            {
                                <a href="@url64"
                                   download="@(Model.Name)_64x64.@(url64.Split('.').LastOrDefault() ?? "png")"
                                   class="block px-4 py-2 text-sm hover:bg-dark-surface/60 text-white no-underline">
                                    <i class="fas fa-download mr-2"></i>64x64
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(url96))
                            {
                                <a href="@url96"
                                   download="@(Model.Name)_96x96.@(url96.Split('.').LastOrDefault() ?? "png")"
                                   class="block px-4 py-2 text-sm hover:bg-dark-surface/60 text-white no-underline">
                                    <i class="fas fa-download mr-2"></i>96x96
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(url128))
                            {
                                <a href="@url128"
                                   download="@(Model.Name)_128x128.@(url128.Split('.').LastOrDefault() ?? "png")"
                                   class="block px-4 py-2 text-sm hover:bg-dark-surface/60 text-white no-underline">
                                    <i class="fas fa-download mr-2"></i>128x128
                                </a>
                            }
                            <div class="px-4 py-2 text-xs text-gray-400 border-t border-dark-border mt-1">Khác</div>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-dark-surface/60 text-white no-underline"
                               data-action="report">
                                <i class="fas fa-flag mr-2"></i>Báo cáo
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Channels Section -->
        <div class="bg-dark-surface/40 border border-dark-border rounded-lg p-6">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-6">
                    <button
                        class="flex items-center space-x-2 px-4 py-2 rounded-lg font-medium bg-primary/20 text-primary border border-primary/30 tab active"
                        data-tab="channels">
                        <i class="fas fa-users"></i>
                        <span>Kênh (@Model.TotalChannels)</span>
                    </button>
                    <button
                        class="flex items-center space-x-2 px-4 py-2 rounded-lg font-medium text-gray-400 hover:text-white hover:bg-dark-surface/60 transition-colors tab"
                        data-tab="activity">
                        <i class="fas fa-bolt"></i>
                        <span>Hoạt động</span>
                    </button>
                </div>
                <div class="flex space-x-2">
                    <button
                        class="p-2 hover:bg-dark-surface/60 rounded text-gray-400 hover:text-white transition-colors"
                        data-direction="prev">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button
                        class="p-2 hover:bg-dark-surface/60 rounded text-gray-400 hover:text-white transition-colors"
                        data-direction="next">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- Channels Grid -->
            <div
                class="grid grid-cols-8 xl:grid-cols-8 lg:grid-cols-7 md:grid-cols-6 sm:grid-cols-4 gap-4 channels-grid">
                @foreach (var channel in Model.Channels)
                {
                    <div
                        class="flex items-center space-x-2 px-3 py-2 rounded-lg hover:bg-dark-surface/60 transition-colors cursor-pointer channel-item group"
                        data-channel="@channel.Name">
                        <div class="relative flex-shrink-0">
                            <img src="@channel.Avatar" alt="@channel.Name" class="w-8 h-8 rounded-full">
                        </div>
                        <span
                            class="text-sm font-medium truncate group-hover:text-white transition-colors text-gray-300">
                            @(channel?.Name ?? "Unknown")
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Emote Set Selection Modal -->
<div id="emote-set-modal" class="fixed inset-0 z-50 hidden">
    <!-- overlay -->
    <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>

    <!-- panel -->
    <div class="absolute inset-0 flex items-center justify-center p-4">
        <div class="w-full max-w-xl rounded-2xl border border-dark-border bg-dark-surface text-zinc-100 shadow-2xl">
            <div class="flex items-center justify-between border-b border-dark-border px-4 py-3">
                <h3 class="text-lg font-semibold">Chọn bộ emote</h3>
                <button type="button" id="close-emote-set-modal"
                        class="cursor-pointer rounded-lg p-2 text-gray-400 transition-all hover:bg-dark-hover hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="p-4">
                <!-- Quick search -->
                <div class="relative md:block mb-3 w-full rounded-lg">
                    <input type="text"
                           placeholder="Tìm kiếm bộ emote..."
                           id="emote-set-search"
                           class="border-dark-border rounded-lg border px-4 py-2 text-sm w-full
              transition-all focus:border-primary focus:ring-2 focus:ring-primary focus:outline-none"/>
                    <svg class="absolute top-2.5 right-3 h-4 w-4 text-gray-400" fill="none"
                         stroke="currentColor"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>

                <!-- List -->
                <div id="emote-set-list"
                     class="max-h-80 divide-y divide-dark-border overflow-auto rounded-lg border border-dark-border">
                    @if (Model.UserEmoteSets != null && Model.UserEmoteSets.Any())
                    {
                        @foreach (var emoteSet in Model.UserEmoteSets)
                        {
                            var name = emoteSet.Name ?? "(no name)";
                            var id = emoteSet.Id.ToString();
                            var emoteCount = emoteSet.Emotes?.Count ?? 0;
                            var capacity = emoteSet.Capacity > 0 ? emoteSet.Capacity : 1000;
                            var percent = (int)Math.Round((double)emoteCount * 100 / capacity);
                            var isActive = emoteSet.IsActive;

                            <label class="flex cursor-pointer items-center gap-3 px-4 py-3 hover:bg-dark-hover"
                                   data-name="@name.ToLowerInvariant()">
                                <input type="radio"
                                       name="select-emote-set"
                                       value="@id"
                                       class="h-4 w-4 accent-primary"/>
                                <div class="min-w-0 flex-1">
                                    <div class="flex items-center gap-2">
                                        <span class="truncate font-medium">@name</span>
                                        @if (isActive)
                                        {
                                            <span class="rounded bg-primary/20 px-2 py-0.5 text-xs text-primary">hiện tại</span>
                                        }
                                    </div>
                                    <div class="text-xs text-zinc-400">
                                        @emoteCount/@capacity emote (@percent%)
                                    </div>
                                    <!-- Progress bar -->
                                    <div class="mt-1 h-1 w-full overflow-hidden rounded-full bg-black">
                                        <div class="h-full bg-primary" style="width:@(percent)%"></div>
                                    </div>
                                </div>
                            </label>
                        }
                    }
                    else
                    {
                        <div class="p-4 text-zinc-400">Không có bộ emote nào khả dụng.</div>
                    }
                </div>

                <!-- Actions -->
                <div class="mt-4 flex items-center justify-end gap-2">
                    <button type="button" id="cancel-emote-set"
                            class="btn-secondary-sm">
                        Hủy
                    </button>

                    <button type="button" id="confirm-emote-set"
                            class="btn-primary btn-sm"
                            disabled>
                        <i class="fas fa-plus"></i>
                        <span>Thêm vào bộ</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include the modal ViewPartial -->
<partial name="_EditModal" model="Model"/>

@section Scripts {
    <!-- Updated script references to include the modal JS file first -->
    <script src="~/js/emote-edit-modal.js"></script>
    <script src="~/js/emote-detail.js"></script>

    <script>
        // Emote Set Selection Modal functionality
        (function () {
            const openBtn = document.getElementById('open-emote-set-modal');
            const modal = document.getElementById('emote-set-modal');
            const closeBtn = document.getElementById('close-emote-set-modal');
            const cancelBtn = document.getElementById('cancel-emote-set');
            const search = document.getElementById('emote-set-search');
            const list = document.getElementById('emote-set-list');
            const confirmBtn = document.getElementById('confirm-emote-set');

            function openModal() {
                modal.classList.remove('hidden');
                setTimeout(() => search?.focus(), 50);
            }

            function closeModal() {
                modal.classList.add('hidden');
                // reset search
                if (search) {
                    search.value = '';
                    filter('');
                }
                // reset selection
                const selected = list.querySelector('input[name="select-emote-set"]:checked');
                if (selected) {
                    selected.checked = false;
                }
                updateSelection();
            }

            function filter(q) {
                const query = (q || '').toLowerCase().trim();
                const rows = list.querySelectorAll('label[data-name]');
                rows.forEach(row => {
                    const name = row.getAttribute('data-name') || '';
                    row.classList.toggle('hidden', !name.includes(query));
                });
            }

            let selectedEmoteSetId = '';

            function updateSelection() {
                const selected = list.querySelector('input[name="select-emote-set"]:checked');
                if (selected) {
                    selectedEmoteSetId = selected.value;
                    confirmBtn.disabled = false;
                    confirmBtn.classList.remove('opacity-50');
                } else {
                    selectedEmoteSetId = '';
                    confirmBtn.disabled = true;
                    confirmBtn.classList.add('opacity-50');
                }
            }

            // Open/close hooks
            openBtn?.addEventListener('click', openModal);
            closeBtn?.addEventListener('click', closeModal);
            cancelBtn?.addEventListener('click', closeModal);
            modal?.addEventListener('click', (e) => {
                // click outside panel closes
                if (e.target === modal) closeModal();
            });
            document.addEventListener('keydown', (e) => {
                if (!modal.classList.contains('hidden') && e.key === 'Escape') closeModal();
            });

            // Search
            search?.addEventListener('input', (e) => filter(e.target.value));

            // Selection change
            list.addEventListener('change', (e) => {
                if (e.target && e.target.name === 'select-emote-set') updateSelection();
            });

            // Handle confirm button click
            confirmBtn?.addEventListener('click', async (e) => {
                if (!selectedEmoteSetId) return;

                try {
                    // Make API call to add emote to selected emote set
                    const formData = new FormData();
                    formData.append('emoteId', '@Model.Id');
                    formData.append('emoteSetId', selectedEmoteSetId);
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

                    const response = await fetch('/EmoteSets/AddEmoteToSet', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert('Đã thêm emote vào bộ thành công!');
                        closeModal();
                        window.location.reload();
                    } else {
                        alert(result.message || 'Có lỗi xảy ra khi thêm emote vào bộ');
                    }
                } catch (error) {
                    console.error('Error adding emote to set:', error);
                    alert('Có lỗi xảy ra khi thêm emote vào bộ');
                }
            });

            // Initialize button disabled state
            updateSelection();
        })();

        // Add to active set functionality
        document.addEventListener('DOMContentLoaded', function () {
            const addToActiveBtn = document.getElementById('add-to-active-btn');
            const activeSetId = addToActiveBtn?.getAttribute('data-active-set-id') || '';

            if (!activeSetId && addToActiveBtn) {
                addToActiveBtn.classList.add('opacity-50', 'cursor-not-allowed');
            }

            addToActiveBtn?.addEventListener('click', async function (e) {
                e.preventDefault();

                if (!activeSetId) {
                    alert('Không có bộ emote nào đang được kích hoạt');
                    return;
                }

                try {
                    // Make API call to add emote to active set
                    const formData = new FormData();
                    formData.append('emoteId', '@Model.Id');
                    formData.append('emoteSetId', activeSetId);
                    formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

                    const response = await fetch('/EmoteSets/AddEmoteToSet', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert('Đã thêm emote vào bộ hiện tại thành công!');
                        window.location.reload();
                    } else {
                        alert(result.message || 'Có lỗi xảy ra khi thêm emote vào bộ');
                    }
                } catch (error) {
                    console.error('Error adding emote to active set:', error);
                    alert('Có lỗi xảy ra khi thêm emote vào bộ');
                }
            });
        });
    </script>
}
