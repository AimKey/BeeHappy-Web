@using BusinessObjects
@using CommonObjects.DTOs.EmoteSetDTOs
@using CommonObjects.ViewModels.EmoteSetVMs
@model EmoteSetDetailVM
@{
    ViewData["Title"] = "Emote của tôi";
    var emoteSet = Model.EmoteSet;
    var emotes = Model.Emotes ?? new List<Emote>();
    var owner = Model.Owner;
    var used = emotes.Count;
    var capacity = emoteSet.Capacity == 0 ? 1 : emoteSet.Capacity;
    var percent = (int)Math.Round((double)Math.Min(used, capacity) * 100 / capacity);
}

<partial name="_Notification"/>
<div class="flex h-full w-full px-6 py-4">
    @* Main content *@
    <div class="w-full flex-1">
        @* Go Back Button *@
        <div class="mb-4">
            <a asp-action="Index" asp-controller="EmoteSets">
                <button
                    class="inline-flex cursor-pointer items-center gap-2 rounded-lg border border-dark-border bg-dark-surface px-4 py-2 text-sm font-semibold text-gray-200 transition-colors hover:bg-dark-hover hover:text-white shadow-sm">
                    <i class="fas fa-arrow-left"></i>
                    Quay lại danh sách
                </button>

            </a>
        </div>

        <div
            class="mb-4 grid w-full grid-cols-[1fr_auto_1fr] items-center gap-3 rounded-lg border border-dark-border bg-dark-surface px-4 py-4 shadow-sm">
            @* Upper half section *@
            <a asp-action="Details" asp-controller="User" asp-route-id="@owner.Id" class="flex items-center gap-3">
                <img src="https://cdn.dlcompare.com/game_tetiere/upload/gameimage/file/54998.jpg.webp"
                     alt="User Avatar"
                     class="h-10 w-10 rounded-full">
                <span class="text-lg font-medium text-white">@(owner?.Username ?? "Người dùng không xác định")</span>
            </a>
            <h1 class="justify-self-center text-2xl font-bold text-white">@Html.Raw(emoteSet.Name)</h1>
            <div class="flex items-center gap-2 justify-self-end">
                @if (emoteSet.IsActive)
                {
                    <div
                        class="flex items-center gap-2 rounded-md bg-primary px-2 py-1 text-sm font-semibold text-white">
                        <i class="fas fa-bolt"></i>
                        Đang hoạt động
                    </div>
                }
            </div>
            @* Tags display *@
            <div class="col-span-1 col-start-2 flex flex-wrap justify-center gap-2">
                @{
                    if (emoteSet.Tags != null && emoteSet.Tags.Count > 0)
                    {
                        foreach (string tag in emoteSet.Tags)
                        {
                            <a class="rounded-md border border-dark-border bg-dark-surface px-4 py-2">@Html.Raw(tag)</a>
                        }
                    }
                }
            </div>

            @* Lower half section *@
            <div class="col-start-1 -col-end-1 w-full">
                <div class="flex items-center gap-4">
                    <div class="h-1 w-full overflow-hidden rounded-full bg-black">
                        <div class="h-full bg-primary transition-all duration-300" style="width:@percent%"></div>
                    </div>
                    <div class="text-sm text-zinc-400">
                        @used/@capacity
                    </div>
                </div>
            </div>
        </div>

        @* Control Buttons and Search *@
        <div class="mb-6 flex items-center justify-between">
            <div class="flex items-center gap-3">
                @* Toggle Active Status Button *@
                <div class="relative">
                    <button id="toggle-active-btn"
                            class="flex cursor-pointer items-center gap-2 rounded-lg border border-dark-border px-4 py-2 text-sm font-semibold transition-colors @(emoteSet.IsActive ? "bg-red-600 text-white hover:bg-red-700" : "bg-primary text-white hover:bg-primary-dark")">
                        <i class="fas fa-bolt"></i>
                        <span id="toggle-btn-text">@(emoteSet.IsActive ? "Hủy kích hoạt" : "Kích hoạt")</span>
                    </button>
                </div>

                @* Edit Button *@
                <button
                    class="flex cursor-pointer items-center gap-2 rounded-lg border border-dark-border bg-dark-surface px-4 py-2 text-sm font-semibold text-gray-200 hover:bg-dark-hover">
                    <i class="fas fa-edit"></i>
                    Chỉnh sửa
                </button>

            </div>

            <div class="flex items-center gap-3">
                @* Search bar *@
                <div class="relative md:block ">
                    <input type="text"
                           placeholder="Tìm kiếm"
                           id="searchBar"
                           class="border-dark-border rounded-lg border px-4 py-2 text-sm 
              transition-all focus:border-primary focus:ring-2 focus:ring-primary focus:outline-none"/>
                    <svg class="absolute top-2.5 right-3 h-4 w-4 text-gray-400" fill="none" stroke="currentColor"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>

                @* View Toggle *@
                <div class="flex items-center gap-1 rounded-lg border border-dark-border bg-dark-surface p-1">
                    <button class="rounded bg-primary p-2 text-white">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="rounded p-2 text-gray-400 hover:text-white">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>

        @* Edit emote set modal *@
        <div id="edit-modal" class="fixed inset-0 z-50 hidden opacity-0 transition-opacity duration-300 ease-in-out">
            <!-- overlay -->
            <div class="absolute inset-0 bg-black/50 transition-opacity duration-300 ease-in-out"></div>

            <!-- panel -->
            <div class="absolute inset-0 flex items-center justify-center p-4">
                <div
                    class="w-full max-w-xl translate-y-4 scale-95 transform rounded-xl border border-zinc-700 bg-zinc-900 text-zinc-100 shadow-2xl transition-all duration-300 ease-in-out">
                    <div class="flex items-center justify-between border-b border-zinc-800 px-4 py-3">
                        <h3 class="text-lg font-semibold">Chỉnh sửa bộ emote</h3>
                        <button type="button" id="close-edit-modal"
                                class="cursor-pointer rounded-md p-2 text-zinc-400 hover:bg-zinc-800 hover:text-zinc-100">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <form asp-action="EditEmoteSet" asp-controller="EmoteSets" method="post" class="p-4">
                        @Html.AntiForgeryToken()
                        @* Id field *@
                        <input type="hidden" name="Id" value="@emoteSet.Id"/>
                        @* Owner Id field *@
                        <input type="hidden" name="OwnerId" value="@emoteSet.OwnerId"/>

                        <!-- Name Field -->
                        <div class="mb-4">
                            <label for="Name" class="mb-2 block text-sm font-medium text-zinc-300">Tên bộ emote</label>
                            <input type="text"
                                   id="Name"
                                   name="Name"
                                   value="@Html.Raw(emoteSet.Name)"
                                   required
                                   class="placeholder-gray-500 w-full rounded-lg bg-zinc-950 px-3 py-2 text-sm 
                text-white outline-none focus:ring-2 focus:ring-primary"
                                   placeholder="Nhập tên bộ emote"/>
                        </div>

                        <!-- Tags Field -->
                        <div class="mb-4">
                            <label for="TagsString" class="mb-2 block text-sm font-medium text-zinc-300">Tags</label>
                            <div class="relative">
                                <input type="text"
                                       id="TagsString"
                                       class="placeholder-gray-500 w-full rounded-lg bg-zinc-950 px-3 py-2 text-sm
 text-white outline-none focus:ring-2 focus:ring-primary"
                                       placeholder="Nhập thẻ và nhấn phím cách để thêm"/>
                                <!-- Hidden input for database -->
                                <input type="hidden" id="TagsStringHidden" name="TagsString" value=""/>
                                <!-- Tags display container -->
                                <div id="tags-display" class="mt-2 flex flex-wrap gap-2">
                                    @* Existing tags will be populated here *@
                                    @if (emoteSet.Tags != null && emoteSet.Tags.Count > 0)
                                    {
                                        foreach (var tag in emoteSet.Tags)
                                        {
                                            <span class="existing-tag" data-tag="@Html.Raw(tag)">@Html.Raw(tag)</span>
                                        }
                                    }
                                </div>
                            </div>
                            <p class="mt-1 text-xs text-zinc-500">Nhập thẻ và nhấn phím cách để thêm. Tối đa 6 thẻ được
                                phép.</p>
                        </div>

                        <!-- Capacity Field -->
                        <div class="mb-4">
                            <label for="Capacity" class="block text-sm font-medium text-zinc-300 mb-2">Giới hạn emote</label>
                            <input type="number"
                                   id="Capacity"
                                   name="Capacity"
                                   min="1"
                                   max="1000"
                                   value="@Html.Raw(Model.EmoteSet.Capacity)"
                                   class="placeholder-gray-500 w-full rounded-lg bg-zinc-950 px-3 py-2 text-sm text-white outline-none focus:ring-2 focus:ring-primary"/>
                        </div>
                        
                        <!-- Is Active Field -->
                        <div class="mb-4 mt-2">
                            @* <label for="IsActive" class="mb-2 block text-sm font-medium text-zinc-300">Trạng thái hoạt *@
                                @* động</label> *@
                            <div class="flex items-center gap-3">
                                <input type="checkbox"
                                       id="IsActive"
                                       name="IsActive"
                                       value="true"
                                       @(emoteSet.IsActive ? "checked" : "")
                                       class="h-4 w-4 rounded border-zinc-700 bg-zinc-950 text-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-900"/>
                                <label for="IsActive" class="cursor-pointer text-sm text-zinc-300">
                                    Đặt làm bộ emote hoạt động
                                </label>
                            </div>
                            <p class="mt-1 text-xs text-zinc-500">Chỉ có thể có một bộ emote hoạt động tại một thời
                                điểm.</p>
                        </div>

                        <!-- Action Buttons -->
                        <div class="mt-6 flex items-center justify-between">
                            <button id="delete-btn" type="button"
                                    class="rounded-lg bg-red-600 px-4 py-2 text-sm font-semibold text-white hover:bg-red-700 focus:outline-none">
                                Xóa bộ emote này
                            </button>
                            <div class="flex items-center gap-3">
                                <button type="button"
                                        id="cancel-edit"
                                        class="rounded-lg bg-dark-surface px-4 py-2 text-sm font-semibold text-gray-200 hover:bg-dark-hover">
                                    Hủy
                                </button>
                                <button type="submit"
                                        class="rounded-lg bg-primary px-4 py-2 text-sm font-semibold text-white hover:bg-primary-dark focus:outline-none">
                                    Chỉnh sửa
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        @* Emote Grid *@
        <div class="grid grid-cols-2 gap-8 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 emotes-grid">
            @if (emotes.Any())
            {
                @foreach (var emote in emotes)
                {
                    var emoteUrl = emote.Files?.FirstOrDefault()?.Url ?? "";
                    <div class="emote-card" data-emote-id="@emote.Id">
                        <div class="emote-thumbnail">
                            @if (!string.IsNullOrEmpty(emoteUrl))
                            {
                                <img src="@emoteUrl" alt="@emote.Name" loading="lazy"
                                     onerror="this.src='/images/placeholder-emote.png'">
                            }
                            else
                            {
                                <img src="/images/placeholder-emote.png" alt="placeholder" loading="lazy">
                            }
                        </div>
                        <div class="emote-info">
                            <div class="emote-name">@Html.Raw(emote.Name)</div>
                            <div class="emote-owner">@(owner?.Username ?? "Không xác định")</div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-span-full flex h-32 items-center justify-center text-zinc-400">
                    <div class="text-center">
                        <i class="fas fa-image mb-2 text-4xl"></i>
                        <p>Không có emote nào trong bộ này</p>
                    </div>
                </div>
            }
        </div>

        @* No More Emotes Message *@
        @if (emotes.Any())
        {
            <div class="mt-8 text-center text-gray-400">
                Không còn emote nào
            </div>
        }
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="~/css/emotes-directory.css">
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('Search script loaded');

            // Enhanced search functionality
            const searchInput = document.querySelector('#searchBar');
            const emoteCards = document.querySelectorAll('.emote-card');
            let searchTimeout;

            console.log('Search input found:', searchInput);
            console.log('Emote cards found:', emoteCards.length);

            // Debounced search function
            function performSearch(query) {
                console.log('Performing search for:', query);
                const searchTerm = query.toLowerCase().trim();
                let visibleCount = 0;
                let hasResults = false;

                emoteCards.forEach((card, index) => {
                    const emoteName = card.querySelector('.emote-name')?.textContent?.toLowerCase() || '';
                    const ownerName = card.querySelector('.emote-owner')?.textContent?.toLowerCase() || '';

                    console.log(`Card ${index}: emoteName="${emoteName}", ownerName="${ownerName}"`);

                    // Search in both emote name and owner name
                    const isVisible = emoteName.includes(searchTerm) || ownerName.includes(searchTerm);

                    if (isVisible) {
                        card.style.display = 'block';
                        card.style.opacity = '1';
                        visibleCount++;
                        hasResults = true;
                    } else {
                        card.style.display = 'none';
                        card.style.opacity = '0';
                    }
                });

                console.log(`Search results: ${visibleCount} visible, hasResults: ${hasResults}`);

                // Show/hide "No more emotes" message based on search results
                const noMoreMessage = document.querySelector('.mt-8.text-center.text-zinc-400');
                if (noMoreMessage) {
                    if (searchTerm && !hasResults) {
                        noMoreMessage.innerHTML = `
                            <div class="text-center">
                                <i class="fas fa-search mb-2 text-4xl"></i>
                                <p>Không tìm thấy emote nào cho "${query}"</p>
                                <button onclick="clearSearch()" class="mt-2 text-blue-400 underline hover:text-blue-300">
                                    Xóa tìm kiếm
                                </button>
                            </div>
                        `;
                        noMoreMessage.style.display = 'block';
                    } else if (searchTerm && hasResults) {
                        noMoreMessage.innerHTML = `
                            <div class="text-center">
                                <p>Hiển thị ${visibleCount} kết quả cho "${query}"</p>
                                <button onclick="clearSearch()" class="mt-2 text-blue-400 underline hover:text-blue-300">
                                    Xóa tìm kiếm
                                </button>
                            </div>
                        `;
                        noMoreMessage.style.display = 'block';
                    } else {
                        noMoreMessage.innerHTML = 'Không còn emote nào';
                        noMoreMessage.style.display = 'block';
                    }
                }
            }

            // Search input event listener with debouncing
            if (searchInput) {
                searchInput.addEventListener('input', function (e) {
                    console.log('Search input changed:', e.target.value);
                    const query = e.target.value;

                    // Clear previous timeout
                    clearTimeout(searchTimeout);

                    // Add loading state
                    searchInput.style.opacity = '0.7';

                    // Debounce search to avoid excessive filtering
                    searchTimeout = setTimeout(() => {
                        performSearch(query);
                        searchInput.style.opacity = '1';
                    }, 150);
                });

                // Clear search function (accessible globally)
                window.clearSearch = function () {
                    console.log('Clearing search');
                    searchInput.value = '';
                    performSearch('');
                    searchInput.focus();
                };

                // Keyboard shortcuts
                searchInput.addEventListener('keydown', function (e) {
                    // Escape key clears search
                    if (e.key === 'Escape') {
                        clearSearch();
                    }
                    // Ctrl/Cmd + K focuses search
                    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                        e.preventDefault();
                        this.focus();
                    }
                });

            } else {
                console.error('Search input not found!');
            }

            // Focus search with Ctrl/Cmd + K anywhere on page
            document.addEventListener('keydown', function (e) {
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    if (searchInput) {
                        searchInput.focus();
                    }
                }
            });

            // Emote card hover effects
            emoteCards.forEach(card => {
                card.addEventListener('mouseenter', function () {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 10px 25px -5px rgba(0, 0, 0, 0.3)';
                });

                card.addEventListener('mouseleave', function () {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '';
                });
            });

            // Initialize search state
            performSearch('');

        });

        // Toggle Active Status functionality
        (function () {
            const toggleBtn = document.getElementById('toggle-active-btn');
            const toggleBtnText = document.getElementById('toggle-btn-text');
            const activeStatusDisplay = document.querySelector('.bg-blue-600\\/80');

            if (toggleBtn) {
                toggleBtn.addEventListener('click', async function () {
                    try {
                        // Disable button during API call
                        toggleBtn.disabled = true;
                        toggleBtn.style.opacity = '0.6';

                        // Get current user ID and emote set ID
                        const emoteSetId = '@emoteSet.Id';
                        const userId = '@emoteSet.OwnerId';

                        // Make API call
                        const formData = new FormData();
                        formData.append('emoteSetId', emoteSetId);
                        formData.append('userId', userId);
                        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                        const response = await fetch('/EmoteSets/ToggleEmoteSetActiveStatus', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Toggle the UI state
                            const isCurrentlyActive = toggleBtnText.textContent === 'Hủy kích hoạt';

                            if (isCurrentlyActive) {
                                // Deactivating - change from red to blue
                                toggleBtn.className = toggleBtn.className.replace(/bg-red-600|hover:bg-red-700/g, '');
                                toggleBtn.className += ' bg-blue-600 hover:bg-blue-700';
                                toggleBtnText.textContent = 'Kích hoạt';

                                // Hide active status display
                                if (activeStatusDisplay) {
                                    activeStatusDisplay.style.display = 'none';
                                }
                            } else {
                                // Activating - change from blue to red
                                toggleBtn.className = toggleBtn.className.replace(/bg-blue-600|hover:bg-blue-700/g, '');
                                toggleBtn.className += ' bg-red-600 hover:bg-red-700';
                                toggleBtnText.textContent = 'Hủy kích hoạt';

                                // Show active status display
                                if (activeStatusDisplay) {
                                    activeStatusDisplay.style.display = 'flex';
                                }
                            }

                            // Show success message then reload to reflect changes
                            showNotification(result.message, 'success');
                            window.location.reload();
                        } else {
                            // Show error message
                            showNotification(result.message, 'error');
                        }
                    } catch (error) {
                        console.error('Error toggling active status:', error);
                        showNotification('Có lỗi xảy ra khi thay đổi trạng thái', 'error');
                    } finally {
                        // Re-enable button
                        toggleBtn.disabled = false;
                        toggleBtn.style.opacity = '1';
                    }
                });
            }

            // Helper function to show notifications
            function showNotification(message, type) {
                // You can implement a toast notification here or use your existing notification system
                console.log(`${type.toUpperCase()}: ${message}`);
                // For now, we'll use alert, but you might want to implement a proper toast notification
                // alert(message);
            }
        })();

        // Edit Modal functionality
        (function () {
            const editButton = document.querySelector('button:has(.fa-edit)');
            const editModal = document.getElementById('edit-modal');
            const closeEditBtn = document.getElementById('close-edit-modal');
            const cancelEditBtn = document.getElementById('cancel-edit');

            // Tag management for edit modal
            let editTags = [];
            const editTagsInput = document.getElementById('TagsString');
            const editTagsHiddenInput = document.getElementById('TagsStringHidden');
            const editTagsDisplay = document.getElementById('tags-display');

            function openEditModal() {
                editModal.classList.remove('hidden');
                // Trigger reflow to ensure the hidden class is removed before adding opacity
                editModal.offsetHeight;
                editModal.classList.remove('opacity-0');
                editModal.classList.add('opacity-100');

                // Animate the panel
                const panel = editModal.querySelector('.transform');
                if (panel) {
                    panel.classList.remove('scale-95', 'translate-y-4');
                    panel.classList.add('scale-100', 'translate-y-0');
                }

                // Reset form to initial state (current emote set values)
                resetFormToInitialState();

                // Focus on the first input after animation starts
                setTimeout(() => document.getElementById('Name')?.focus(), 100);
            }

            function closeEditModal() {
                // Start fade out animation
                editModal.classList.remove('opacity-100');
                editModal.classList.add('opacity-0');

                // Animate the panel out
                const panel = editModal.querySelector('.transform');
                if (panel) {
                    panel.classList.remove('scale-100', 'translate-y-0');
                    panel.classList.add('scale-95', 'translate-y-4');
                }

                // Hide modal after animation completes
                setTimeout(() => {
                    editModal.classList.add('hidden');
                    // Reset form to initial state (current emote set values)
                    resetFormToInitialState();
                }, 300); // Match the CSS transition duration
            }

            function resetFormToInitialState() {
                // Reset name field to current emote set name
                const nameInput = document.getElementById('Name');
                if (nameInput) {
                    nameInput.value = '@Html.Raw(emoteSet.Name)';
                }

                // Reset capacity field to current capacity
                const capacityInput = document.getElementById('Capacity');
                if (capacityInput) {
                    capacityInput.value = '@Html.Raw(emoteSet.Capacity)';
                }

                // Reset IsActive checkbox to current state
                const isActiveCheckbox = document.getElementById('IsActive');
                if (isActiveCheckbox) {
                    isActiveCheckbox.checked = @emoteSet.IsActive.ToString().ToLower();
                }

                // Reset tags to current emote set tags
                editTags = [];
                @if (emoteSet.Tags != null && emoteSet.Tags.Count > 0)
                {
                    <text>
                        editTags = [
                            @foreach (var tag in emoteSet.Tags)
                            {
                                <text>"@Html.Raw(tag)"@(tag != emoteSet.Tags.Last() ? "," : "")</text>
                            }
                        ];
                    </text>
                }
                updateEditTagsDisplay();
                updateEditHiddenInput();
            }


            function addEditTag(tagText) {
                const trimmedTag = tagText.trim();
                if (trimmedTag && !isTagDuplicate(trimmedTag)) {
                    if (editTags.length >= 6) {
                        // Show a message or prevent adding more tags
                        alert('Bạn chỉ có thể thêm tối đa 6 thẻ cho mỗi bộ emote.');
                        return;
                    }
                    editTags.push(trimmedTag);
                    updateEditTagsDisplay();
                    updateEditHiddenInput();
                }
            }

            function isTagDuplicate(newTag) {
                // Normalize both strings for proper comparison with Vietnamese characters
                const normalizedNewTag = newTag.normalize('NFC').toLowerCase();
                return editTags.some(existingTag =>
                    existingTag.normalize('NFC').toLowerCase() === normalizedNewTag
                );
            }

            function removeEditTag(tagToRemove) {
                console.log(`Tag to remove: ${tagToRemove}`)
                // Normalize the tag to remove for proper comparison
                const normalizedTagToRemove = tagToRemove.normalize('NFC').toLowerCase();
                editTags = editTags.filter(tag =>
                    tag.normalize('NFC').toLowerCase() !== normalizedTagToRemove
                );
                updateEditTagsDisplay();
                updateEditHiddenInput();
            }

            function updateEditTagsDisplay() {
                editTagsDisplay.innerHTML = '';

                // Add tag count indicator
                const countElement = document.createElement('div');
                countElement.className = 'w-full text-xs text-zinc-400 mb-2';
                countElement.textContent = `Thẻ: ${editTags.length}/6`;
                editTagsDisplay.appendChild(countElement);

                editTags.forEach(tag => {
                    const tagElement = document.createElement('div');
                    tagElement.className = 'inline-flex items-center gap-1 rounded-full bg-blue-600/80 px-3 py-1 text-sm text-white';
                    tagElement.innerHTML = `
                        <span>${tag}</span>
                        <button type="button" onclick="removeEditTagFromModal('${tag}')" class="ml-1 hover:text-red-300">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    editTagsDisplay.appendChild(tagElement);
                });
            }

            function updateEditHiddenInput() {
                // Update the hidden input field with comma-separated tags for database
                if (editTagsHiddenInput) {
                    editTagsHiddenInput.value = editTags.join(',');
                }
            }

            // HTML decoder function for handling encoded characters
            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;
                return txt.value;
            }

            // Make removeEditTagFromModal globally accessible
            window.removeEditTagFromModal = function (tag) {
                const decodedTag = decodeHtml(tag);
                console.log(`Tag to remove (decoded): ${decodedTag}`);
                removeEditTag(decodedTag);
            };

            // Handle space key press for tag creation
            editTagsInput?.addEventListener('keydown', function (e) {
                if (e.key === ' ' || e.key === 'Space') {
                    e.preventDefault();
                    const currentValue = this.value.trim();
                    if (currentValue) {
                        addEditTag(currentValue);
                        this.value = '';
                    }
                }
            });

            // Handle comma key press as alternative
            editTagsInput?.addEventListener('keydown', function (e) {
                if (e.key === ',') {
                    e.preventDefault();
                    const currentValue = this.value.trim();
                    if (currentValue) {
                        addEditTag(currentValue);
                        this.value = '';
                    }
                }
            });

            // Form submission handler
            const editForm = editModal?.querySelector('form');
            editForm?.addEventListener('submit', function (e) {
                // Ensure tags are included in the form submission
                updateEditHiddenInput();

                // Decode any HTML entities in form fields before submission
                const nameInput = document.getElementById('Name');
                if (nameInput) {
                    nameInput.value = decodeHtml(nameInput.value);
                }

                const tagsInput = document.getElementById('TagsStringHidden');
                if (tagsInput) {
                    tagsInput.value = decodeHtml(tagsInput.value);
                }
            });

            const deleteBtn = document.getElementById('delete-btn');
            deleteBtn?.addEventListener('click', function () {
                Swal.fire({
                    title: 'Bạn có chắc chắn?',
                    text: "Hành động này không thể hoàn tác. Bộ emote sẽ bị xóa vĩnh viễn!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc2626',
                    cancelButtonColor: '#6b7280',
                    confirmButtonText: 'Có, xóa bộ emote!',
                    cancelButtonText: 'Hủy bỏ',
                    background: '#18181b',
                    color: '#ffffff',
                    customClass: {
                        popup: 'border border-zinc-700',
                        title: 'text-white',
                        htmlContainer: 'text-zinc-300'
                    }
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            // Show loading state
                            Swal.fire({
                                title: 'Đang xóa...',
                                text: 'Vui lòng chờ trong giây lát',
                                icon: 'info',
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                background: '#18181b',
                                color: '#ffffff',
                                customClass: {
                                    popup: 'border border-zinc-700'
                                },
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Get emote set ID
                            const emoteSetId = '@emoteSet.Id';

                            // Create form data
                            const formData = new FormData();
                            formData.append('id', emoteSetId);
                            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                            // Make API call to delete
                            const response = await fetch('/EmoteSets/Delete/' + emoteSetId, {
                                method: 'POST',
                                body: formData
                            });

                            const result = await response.json();

                            if (response.ok && result.success) {
                                // Success - show success message and redirect
                                Swal.fire({
                                    title: 'Đã xóa!',
                                    text: result.message || 'Bộ emote đã được xóa thành công.',
                                    icon: 'success',
                                    background: '#18181b',
                                    color: '#ffffff',
                                    customClass: {
                                        popup: 'border border-zinc-700'
                                    }
                                }).then(() => {
                                    // Redirect to emote sets list
                                    window.location.href = '/EmoteSets';
                                });
                            } else {
                                // Error response
                                Swal.fire({
                                    title: 'Lỗi!',
                                    text: result.message || 'Không thể xóa bộ emote. Vui lòng thử lại sau.',
                                    icon: 'error',
                                    background: '#18181b',
                                    color: '#ffffff',
                                    customClass: {
                                        popup: 'border border-zinc-700'
                                    }
                                });
                            }
                        } catch (error) {
                            console.error('Error deleting emote set:', error);
                            Swal.fire({
                                title: 'Lỗi!',
                                text: 'Có lỗi xảy ra khi xóa bộ emote. Vui lòng thử lại sau.',
                                icon: 'error',
                                background: '#18181b',
                                color: '#ffffff',
                                customClass: {
                                    popup: 'border border-zinc-700'
                                }
                            });
                        }
                    }
                });
            });

            // Event listeners for edit modal
            editButton?.addEventListener('click', openEditModal);
            closeEditBtn?.addEventListener('click', closeEditModal);
            cancelEditBtn?.addEventListener('click', closeEditModal);

            // Close modal when clicking outside
            editModal?.addEventListener('click', (e) => {
                if (e.target === editModal) closeEditModal();
            });

            // Close modal with Escape key
            document.addEventListener('keydown', (e) => {
                if (!editModal.classList.contains('hidden') && !editModal.classList.contains('opacity-0') && e.key === 'Escape') {
                    closeEditModal();
                }
            });
        })();
    </script>
}
