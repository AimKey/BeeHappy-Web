@using CommonObjects.DTOs.EmoteSetDTOs
@using CommonObjects.ViewModels.EmoteSetVMs
@model IEnumerable<EmoteSetPreviewVM>
@{
    Layout = "_UserSettingsLayout";
    ViewData["Title"] = "Bộ emote";
    var activeSet = Model?.FirstOrDefault(m => m.IsActive);
    var activeSetName = activeSet?.EmoteSetName ?? "Không có";
    var activeSetId = activeSet?.EmoteSetId.ToString() ?? ""; // adjust property name to your Id
}
@* <partial name="_Notification"/> *@
<div class="w-full">
    @* // Main stuff *@
    <div class="px-6 py-4 flex-[10]">
        <h2 class="text-2xl font-bold text-white mb-2">Quản lý bộ emote</h2>
        <p class="text-gray-400 mb-4">Quản lý, kích hoạt và tạo các bộ emote cho kênh của bạn.</p>

        <div class="flex w-full items-center justify-between py-4">
            @* Left side: Activated selector (button opens modal) *@
            <div class="flex items-center gap-2">
                <span class="font-semibold">Đang kích hoạt:</span>

                <button id="open-activate-modal"
                        type="button"
                        class="flex cursor-pointer items-center gap-2 rounded-lg border border-dark-border bg-dark-surface px-4 py-2 text-sm font-semibold text-white shadow-md transition-all hover:bg-dark-hover">
                    <i class="fas fa-bolt"></i>
                    <span id="current-active-name">@activeSetName</span>
                </button>
            </div>

            @* Right side: Create button (your existing one) *@
            <button id="open-create-modal"
                    class="flex cursor-pointer items-center gap-2 rounded-lg bg-primary hover:bg-primary-dark px-4 py-2 text-sm font-semibold text-white shadow-md transition-all hover:shadow-lg active:scale-95">
                <i class="fas fa-plus"></i>
                Tạo bộ mới
            </button>
        </div>

        @* ---------- Modal: Activate Set ---------- *@
        <div id="activate-modal" class="fixed inset-0 z-50 hidden">
            <!-- overlay -->
            <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>

            <!-- panel -->
            <div class="absolute inset-0 flex items-center justify-center p-4">
                <div class="w-full max-w-xl rounded-2xl border border-dark-border bg-dark-surface text-zinc-100 shadow-2xl">
                    <div class="flex items-center justify-between border-b border-dark-border px-4 py-3">
                        <h3 class="text-lg font-semibold">Kích hoạt bộ emote</h3>
                        <button type="button" id="close-activate-modal"
                                class="cursor-pointer rounded-lg p-2 text-gray-400 transition-all hover:bg-dark-hover hover:text-white">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <div class="p-4">
                        <!-- Quick search -->
                        @*                         <div class="mb-3"> *@
                        @*                             <label for="set-search" class="sr-only">Tìm kiếm bộ</label> *@
                        @*                             <div class="relative"> *@
                        @*                                 <i class="fas fa-search absolute top-1/2 left-3 -translate-y-1/2 text-gray-400"></i> *@
                        @*                                 <input id="set-search" type="text" placeholder="Tìm kiếm bộ…" *@
                        @*                                        class="placeholder-gray-500 w-full rounded-lg border border-dark-border bg-dark-surface py-2 pr-3 pl-10 *@
                        @*                                           text-sm text-white outline-none focus:border-primary focus:ring focus:ring-primary/40" /> *@
                        @*                             </div> *@
                        @*                         </div> *@

                        <div class="relative md:block mb-3 w-full rounded-lg">
                            <input type="text"
                                   placeholder="Tìm kiếm bộ..."
                                   id="set-search"
                                   class="w-full bg-dark-surface text-white px-3 py-2 rounded-md border border-dark-border focus:border-primary focus:outline-none transition-colors"/>
                            <svg class="absolute top-2.5 right-3 h-4 w-4 text-gray-400" fill="none"
                                 stroke="currentColor"
                                 viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>

                        <!-- List -->
                        <div id="set-list"
                             class="max-h-80 divide-y divide-dark-border overflow-auto rounded-lg border border-dark-border">
                            @if (Model != null)
                            {
                                foreach (var s in Model)
                                {
                                    var isActive = s.IsActive;
                                    var name = s.EmoteSetName ?? "(no name)";
                                    var id = s.EmoteSetId; // adjust to your id property
                                    <label class="flex cursor-pointer items-center gap-3 px-4 py-3 hover:bg-dark-hover"
                                           data-name="@name.ToLowerInvariant()">
                                        <input type="radio"
                                               name="activate-set"
                                               value="@id"
                                               class="h-4 w-4 accent-primary"
                                               @(isActive ? "checked" : "")/>
                                        <div class="min-w-0 flex-1">
                                            <div class="flex items-center gap-2">
                                                <span class="truncate font-medium">@name</span>
                                                @if (isActive)
                                                {
                                                    <span
                                                        class="rounded bg-primary/20 px-2 py-0.5 text-xs text-primary">hiện tại</span>
                                                }
                                            </div>
                                            <div class="text-xs text-zinc-400">
                                                @s.EmoteCount/@(s.EmoteCapacity == 0 ? 1 : s.EmoteCapacity) emote
                                            </div>
                                        </div>
                                    </label>
                                }
                            }
                            else
                            {
                                <div class="p-4 text-zinc-400">Không có bộ nào khả dụng.</div>
                            }
                        </div>

                        <!-- Actions -->
                        <div class="mt-4 flex items-center justify-end gap-2">
                            <button type="button" id="cancel-activate"
                                    class="btn-secondary-sm">
                                Hủy
                            </button>

                            <button type="button" id="confirm-activate"
                                    class="btn-primary btn-sm btn-disabled"
                                    disabled>
                                <i class="fas fa-bolt"></i>
                                <span>Kích hoạt</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* --------- Emote Set grid --------- *@
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            @if (Model != null)
            {
                foreach (var set in Model)
                {
                    var totalSlots = 10;
                    var thumbnails = set.Emotes ?? new List<EmoteSetEmotePreviewVM>();
                    var used = set.EmoteCount;
                    var capacity = set.EmoteCapacity == 0 ? 1 : set.EmoteCapacity;
                    var percent = (int)Math.Round((double)Math.Min(used, capacity) * 100 / capacity);
                    var borderColor = set.IsActive ? "border-sky-500" : "border-zinc-800";
                    var activeBorderColor = set.IsActive ? "border-yellow-700" : "border-stone-700";
                    <a asp-action="Details" asp-route-id="@set.EmoteSetId" class="cursor-pointer rounded-lg border p-3 transition-all duration-150 ease-in bg-dark-surface hover:bg-dark-hover shadow-sm
            @(set.IsActive ? "border-primary hover:border-primary-dark" : "border-dark-border hover:border-gray-600")">

                        <div class="mb-3 truncate text-sm font-semibold text-white">@set.EmoteSetName</div>

                        <div class="mb-3 grid grid-cols-5 gap-2">
                            @for (var i = 0; i < totalSlots; i++)
                            {
                                if (i < thumbnails.Count)
                                {
                                    var emote = thumbnails[i];
                                    <div class="aspect-square w-full overflow-hidden rounded-md bg-dark-surface">
                                        <img src="@emote.Url" alt="emote" class="h-full w-full object-cover"/>
                                    </div>
                                }
                                else
                                {
                                    <div
                                        class="aspect-square w-full rounded-md border border-dark-border bg-dark-surface/70"></div>
                                }
                            }
                        </div>

                        <div class="space-y-1">
                            <div class="h-2 w-full overflow-hidden rounded-full bg-black">
                                <div class="h-full bg-primary" style="width:@(percent)%"></div>
                            </div>
                            <div class="text-xs text-gray-400">
                                @used/@capacity (@percent%)
                            </div>
                        </div>
                    </a>
                }
            }
            else
            {
                <div class="text-zinc-400">Không có bộ emote nào để hiển thị.</div>
            }
        </div>
    </div>

</div>

@* ---------- Modal: Create New Emote Set ---------- *@
<div id="create-modal" class="fixed inset-0 z-50 hidden">
    <!-- overlay -->
    <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>

    <!-- panel -->
    <div class="absolute inset-0 flex items-center justify-center p-4">
        <div class="w-full max-w-xl rounded-2xl border border-dark-border bg-dark-surface text-zinc-100 shadow-2xl">
            <div class="flex items-center justify-between border-b border-dark-border px-4 py-3">
                <h3 class="text-lg font-semibold">Tạo bộ emote mới</h3>
                <button type="button" id="close-create-modal"
                        class="cursor-pointer rounded-lg p-2 text-gray-400 transition-all hover:bg-dark-hover hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form asp-action="Create" asp-controller="EmoteSets" method="post" class="p-4">
                @Html.AntiForgeryToken()
                <!-- Name Field -->
                <div class="mb-4">
                    <label for="Name" class="mb-2 block text-sm font-medium text-zinc-300">Tên bộ emote</label>
                    <input type="text"
                           id="Name"
                           name="Name"
                           required
                           class="w-full bg-dark-surface text-white px-3 py-2 rounded-md border border-dark-border focus:border-primary focus:outline-none transition-colors"
                           placeholder="Nhập tên bộ emote"/>
                </div>

                <!-- Tags Field -->
                <div class="mb-4">
                    <label for="TagsInputDisplay" class="mb-2 block text-sm font-medium text-zinc-300">Thẻ</label>
                    <div class="relative">
                        <input type="text"
                               id="TagsInputDisplay"
                               class="w-full bg-dark-surface text-white px-3 py-2 rounded-md border border-dark-border focus:border-primary focus:outline-none transition-colors"
                               placeholder="Nhập thẻ và nhấn phím cách để thêm"/>
                        <input type="hidden" id="TagsString" name="TagsString" value=""/>
                        <!-- Tags display container -->
                        <div id="tags-display" class="mt-2 flex flex-wrap gap-2"></div>
                    </div>
                    <p class="mt-1 text-xs text-zinc-500">Nhập thẻ và nhấn phím cách để thêm. Tối đa 6 thẻ được
                        phép.</p>
                </div>

                <!-- Capacity Field (Hidden, emote set always has capacity of 1000) -->
                <input type="hidden"
                       id="Capacity"
                       name="Capacity"
                       value="1000"
                       class="placeholder-zinc-500 w-full rounded-md border border-zinc-700 bg-zinc-950 
px-3 py-2 text-sm text-white outline-none "/>

                <!-- Action Buttons -->
                <div class="flex items-center justify-between p-4 border-t border-dark-border">
                    <div></div>
                    <div class="flex space-x-3">
                        <button type="button"
                                id="cancel-create"
                                class="btn-secondary-sm">
                            Hủy
                        </button>
                        <button type="submit"
                                class="btn-primary btn-sm">
                            <i class="fas fa-plus"></i>
                            <span>Tạo bộ</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            const openBtn = document.getElementById('open-activate-modal');
            const modal = document.getElementById('activate-modal');
            const closeBtn = document.getElementById('close-activate-modal');
            const cancelBtn = document.getElementById('cancel-activate');
            const search = document.getElementById('set-search');
            const list = document.getElementById('set-list');
            const confirmBtn = document.getElementById('confirm-activate');
            const currentNameEl = document.getElementById('current-active-name');

            function openModal() {
                modal.classList.remove('hidden');
                setTimeout(() => search?.focus(), 50);
            }

            function closeModal() {
                modal.classList.add('hidden');
                // reset search
                if (search) {
                    search.value = '';
                    filter('');
                }
            }

            function filter(q) {
                const query = (q || '').toLowerCase().trim();
                const rows = list.querySelectorAll('label[data-name]');
                rows.forEach(row => {
                    const name = row.getAttribute('data-name') || '';
                    row.classList.toggle('hidden', !name.includes(query));
                });
            }

            let selectedSetId = '';

            function updateSelection() {
                const selected = list.querySelector('input[name="activate-set"]:checked');
                if (selected) {
                    selectedSetId = selected.value;
                    confirmBtn.disabled = false;
                    confirmBtn.classList.remove('opacity-50');
                } else {
                    selectedSetId = '';
                    confirmBtn.disabled = true;
                    confirmBtn.classList.add('opacity-50');
                }
            }

            // Open/close hooks
            openBtn?.addEventListener('click', openModal);
            closeBtn?.addEventListener('click', closeModal);
            cancelBtn?.addEventListener('click', closeModal);
            modal?.addEventListener('click', (e) => {
                // click outside panel closes
                if (e.target === modal) closeModal();
            });
            document.addEventListener('keydown', (e) => {
                if (!modal.classList.contains('hidden') && e.key === 'Escape') closeModal();
            });

            // Search
            search?.addEventListener('input', (e) => filter(e.target.value));

            // Selection change
            list.addEventListener('change', (e) => {
                if (e.target && e.target.name === 'activate-set') updateSelection();
            });

            // Handle activate button click using the predefined toggle function
            confirmBtn?.addEventListener('click', async (e) => {
                if (!selectedSetId) return;

                // Use the predefined toggle function
                await toggleEmoteSetActive(e, selectedSetId);
            });

            // Initialize button disabled state based on default checked (current active)
            updateSelection();

        })();

        // Toggle Emote Set Active Status functionality
        async function toggleEmoteSetActive(event, emoteSetId) {
            event.preventDefault();
            event.stopPropagation();

            try {
                // Make API call
                const formData = new FormData();
                formData.append('emoteSetId', emoteSetId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                const response = await fetch('/EmoteSets/ToggleEmoteSetActiveStatus', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    // Reload the page to show updated status
                    window.location.reload();
                } else {
                    // Show error message
                    alert(result.message || 'Có lỗi xảy ra khi thay đổi trạng thái');
                }
            } catch (error) {
                console.error('Error toggling active status:', error);
                alert('Có lỗi xảy ra khi thay đổi trạng thái');
            }
        }

        // Create Modal functionality
        (function () {
            const openCreateBtn = document.getElementById('open-create-modal');
            const createModal = document.getElementById('create-modal');
            const closeCreateBtn = document.getElementById('close-create-modal');
            const cancelCreateBtn = document.getElementById('cancel-create');

            // HTML decoder function for handling encoded characters
            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;
                return txt.value;
            }

            function openCreateModal() {
                createModal.classList.remove('hidden');
                // Focus on the first input
                setTimeout(() => document.getElementById('Name')?.focus(), 50);
            }

            function closeCreateModal() {
                createModal.classList.add('hidden');
                // Reset form
                const form = createModal.querySelector('form');
                if (form) {
                    form.reset();
                }
                // Reset tags
                tags = [];
                updateTagsDisplay();
                updateHiddenInput();
            }

            // Tag management
            let tags = [];
            const tagsInput = document.getElementById('TagsString');
            const tagsInputDisplay = document.getElementById('TagsInputDisplay');
            const tagsDisplay = document.getElementById('tags-display');

            function addTag(tagText) {
                const trimmedTag = tagText.trim();
                if (trimmedTag && !tags.includes(trimmedTag)) {
                    if (tags.length >= 6) {
                        // Show a message or prevent adding more tags
                        alert('Bạn chỉ có thể thêm tối đa 6 thẻ cho mỗi bộ emote.');
                        return;
                    }
                    tags.push(trimmedTag);
                    updateTagsDisplay();
                    updateHiddenInput();
                }
            }

            function removeTag(tagToRemove) {
                tags = tags.filter(tag => tag !== tagToRemove);
                updateTagsDisplay();
                updateHiddenInput();
            }

            function updateTagsDisplay() {
                tagsDisplay.innerHTML = '';

                // Add tag count indicator
                const countElement = document.createElement('div');
                countElement.className = 'w-full text-xs text-zinc-400 mb-2';
                countElement.textContent = `Thẻ: ${tags.length}/6`;
                tagsDisplay.appendChild(countElement);

                tags.forEach(tag => {
                    const tagElement = document.createElement('div');
                    tagElement.className = 'inline-flex items-center gap-1 rounded-md bg-zinc-800/60 px-2 py-1 text-xs text-white';
                    tagElement.innerHTML = `
                <span>${tag}</span>
                <button type="button" onclick="removeTagFromModal('${tag}')" class="ml-1 hover:text-red-300">
                  <i class="fas fa-times"></i>
                </button>
              `;
                    tagsDisplay.appendChild(tagElement);
                });
            }

            function updateHiddenInput() {
                // Update the hidden input field with comma-separated tags for submission
                if (tagsInput) {
                    tagsInput.value = tags.join(',');
                }
            }

            // Make removeTagFromModal globally accessible
            window.removeTagFromModal = function (tag) {
                removeTag(tag);
            };

            // Handle space key press for tag creation (display-only input)
            tagsInputDisplay?.addEventListener('keydown', function (e) {
                if (e.key === ' ' || e.key === 'Space') {
                    e.preventDefault();
                    const currentValue = this.value.trim();
                    if (currentValue) {
                        addTag(currentValue);
                        this.value = '';
                    }
                }
            });

            // Handle comma key press as alternative (display-only input)
            tagsInputDisplay?.addEventListener('keydown', function (e) {
                if (e.key === ',') {
                    e.preventDefault();
                    const currentValue = this.value.trim();
                    if (currentValue) {
                        addTag(currentValue);
                        this.value = '';
                    }
                }
            });

            // Form submission handler
            const createForm = createModal?.querySelector('form');
            createForm?.addEventListener('submit', function (e) {
                // Ensure tags are included in the form submission
                updateHiddenInput();

                // Decode any HTML entities in form fields before submission
                const nameInput = document.getElementById('Name');
                if (nameInput) {
                    nameInput.value = decodeHtml(nameInput.value);
                }

                const tagsInput = document.getElementById('TagsString');
                if (tagsInput) {
                    tagsInput.value = decodeHtml(tagsInput.value);
                }
            });

            // Event listeners for create modal
            openCreateBtn?.addEventListener('click', openCreateModal);
            closeCreateBtn?.addEventListener('click', closeCreateModal);
            cancelCreateBtn?.addEventListener('click', closeCreateModal);

            // Close modal when clicking outside
            createModal?.addEventListener('click', (e) => {
                if (e.target === createModal) closeCreateModal();
            });

            // Close modal with Escape key
            document.addEventListener('keydown', (e) => {
                if (!createModal.classList.contains('hidden') && e.key === 'Escape') {
                    closeCreateModal();
                }
            });
        })();
    </script>
}
